{"version":3,"sources":["components/TaskBanner.js","components/TaskCreator.js","components/TaskRow.js","components/VisibilityControl.js","App.js","reportWebVitals.js","index.js"],"names":["TaskBanner","taskItems","userName","remainingTasks","filter","t","done","length","className","TaskCreator","handleAddTask","useState","taskName","setTaskName","type","value","onChange","event","target","handleInputChange","onClick","TaskRow","task","handleStatusChange","name","checked","VisibilityControl","isChecked","handleShowCompleted","e","htmlFor","App","setTaskItems","showCompleted","setShowCompleted","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","map","taskTableRows","doneValue","find","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b1c4b51.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const TaskBanner = ({taskItems,userName}) => {\r\n   \r\n    let remainingTasks = taskItems.filter(t => !t.done).length\r\n    \r\n    return (\r\n        <div>\r\n            <h3 className=\"bg-primary text-white text-center p-4\">User: {userName}<br/> Remaining tasks: {remainingTasks}</h3>\r\n          \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport const TaskCreator = ({handleAddTask}) => {\r\n    \r\n    const [taskName, setTaskName] = useState('');    \r\n\r\n\r\n    const handleInputChange = (event) => {\r\n        setTaskName(event.target.value)\r\n    }\r\n\r\n    //Clear input and and send data \r\n    const handleOnSubmit = () => {\r\n        setTaskName('')\r\n        handleAddTask(taskName)\r\n    }\r\n    return (\r\n        <div className=\"m-1\">\r\n            <input \r\n            className=\"form-comtrol\"\r\n            type=\"text\"\r\n            value={taskName}\r\n            onChange={(event) => handleInputChange(event)}\r\n            />\r\n            <button className=\"btn btn-primary ml-2\" onClick={handleOnSubmit}>Add </button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const TaskRow = ({ task, handleStatusChange }) => (\r\n    <tr key={task.name}>\r\n\r\n        <td>{task.name}</td>\r\n        \r\n        <td>\r\n        <input \r\n        type=\"checkbox\" \r\n        checked={task.done} \r\n        onChange={() => handleStatusChange(task)}     \r\n        />\r\n        </td>\r\n\r\n    </tr>\r\n)\r\n","import React from 'react'\r\n\r\nexport const VisibilityControl = ({isChecked,handleShowCompleted}) => {\r\n    return (\r\n        <div className=\"form-check\">\r\n            \r\n            <input \r\n            type=\"checkbox\"\r\n            className=\"form-check-input\"\r\n            checked={isChecked}\r\n            onChange={(e) => handleShowCompleted(e.target.checked)}\r\n            />\r\n            <label htmlFor=\"form-check-label\">Show Completed Tasks</label>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState,useEffect } from 'react'\nimport { TaskBanner } from './components/TaskBanner';\nimport { TaskCreator } from './components/TaskCreator';\nimport { TaskRow } from './components/TaskRow';\nimport { VisibilityControl } from './components/VisibilityControl';\n\nexport const App = () => {\n\n  const [userName, setUserName] = useState('Martin')\n\n  const [taskItems, setTaskItems] = useState([\n    { name: 'Task One', done: false },\n    { name: 'Task Two', done: false },\n    { name: 'Task Three', done: false },\n    { name: 'Task Four', done: true }\n  ]);\n\n  const [showCompleted, setShowCompleted] = useState(true);\n\n\n  useEffect(() => {\n   let data = localStorage.getItem('tasks');\n   if (data != null) {\n     setTaskItems(JSON.parse(data))\n   } else {\n     setTaskItems([\n      { name: 'Task One', done: false },\n      { name: 'Task Two', done: false },\n      { name: 'Task Three', done: false },\n      { name: 'Task Four', done: true }\n     ])\n   }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(taskItems));\n  }, [taskItems]);\n\n  const handleStatusChange = (task) => {\n    //Recorro la lista de tareas hasta encontrar la coincidencia\n    setTaskItems(taskItems.map(t => (t.name === task.name ? { ...t, done: !t.done } : t)))\n\n  }\n\n  const handleAddTask = (taskName) => {\n    //Si no hay una tarea con el mismo nombre la crea \n    if (!taskItems.find(t => t.name === taskName)) {\n\n      setTaskItems([...taskItems, { name: taskName, done: false }])\n    }\n  }\n\n  const handleShowCompleted = (e) => {\n    setShowCompleted(e)\n  }\n\n\n  //Render table rows\n  const taskTableRows = (doneValue) => taskItems\n    .filter(task => task.done === doneValue)\n    .map(task => (\n      <TaskRow task={task} key={task.name} handleStatusChange={handleStatusChange} />\n    ))\n\n  return (\n    <div>\n      <TaskBanner taskItems={taskItems} userName={userName} />\n      <TaskCreator handleAddTask={handleAddTask} />\n      <table className=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>Description</th>\n            <th>Done</th>\n          </tr>\n        </thead>\n        <tbody>\n          {taskTableRows(false)}\n        </tbody>\n      </table>\n      <div className=\"bg-secondary text-white text-center p-2\">\n        <VisibilityControl isChecked={showCompleted} handleShowCompleted={handleShowCompleted} />\n      </div>\n\n      {\n        showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>\n              {taskTableRows(true)}\n            </tbody>\n          </table>\n        )\n      }\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}